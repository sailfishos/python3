diff --git a/Python/random.c b/Python/random.c
index 93d300d..84194ed 100644
--- a/Python/random.c
+++ b/Python/random.c
@@ -1,6 +1,9 @@
 #include "Python.h"
 #ifdef MS_WINDOWS
 #include <windows.h>
+/* All sample MSDN wincrypt programs include the header below. It is at least
+ * required with Min GW. */
+#include <wincrypt.h>
 #else
 #include <fcntl.h>
 #ifdef HAVE_SYS_STAT_H
@@ -67,34 +68,7 @@ win32_urandom(unsigned char *buffer, Py_ssize_t size, int raise)
     return 0;
 }

-#elif HAVE_GETENTROPY
-/* Fill buffer with size pseudo-random bytes generated by getentropy().
-   Return 0 on success, or raise an exception and return -1 on error.
-
-   If fatal is nonzero, call Py_FatalError() instead of raising an exception
-   on error. */
-static int
-py_getentropy(unsigned char *buffer, Py_ssize_t size, int fatal)
-{
-    while (size > 0) {
-        Py_ssize_t len = Py_MIN(size, 256);
-        int res = getentropy(buffer, len);
-        if (res < 0) {
-            if (fatal) {
-                Py_FatalError("getentropy() failed");
-            }
-            else {
-                PyErr_SetFromErrno(PyExc_OSError);
-                return -1;
-            }
-        }
-        buffer += len;
-        size -= len;
-    }
-    return 0;
-}
-
-#else
+#else /* !MS_WINDOWS */
 static struct {
     int fd;
     dev_t st_dev;
@@ -226,7 +200,7 @@ dev_urandom_close(void)
     }
 }

-#endif /* HAVE_GETENTROPY */
+#endif /* MS_WINDOWS */

 /* Fill buffer with pseudo-random bytes generated by a linear congruent
    generator (LCG):
@@ -267,8 +241,6 @@ _PyOS_URandom(void *buffer, Py_ssize_t size)

 #ifdef MS_WINDOWS
     return win32_urandom((unsigned char *)buffer, size, 1);
-#elif HAVE_GETENTROPY
-    return py_getentropy(buffer, size, 0);
 #else
     return dev_urandom_python((char*)buffer, size);
 #endif
@@ -314,8 +286,6 @@ _PyRandom_Init(void)
     else {
 #ifdef MS_WINDOWS
         (void)win32_urandom(secret, secret_size, 0);
-#elif HAVE_GETENTROPY
-        (void)py_getentropy(secret, secret_size, 1);
 #else
         dev_urandom_noraise(secret, secret_size);
 #endif
@@ -330,8 +300,6 @@ _PyRandom_Fini(void)
         CryptReleaseContext(hCryptProv, 0);
         hCryptProv = 0;
     }
-#elif HAVE_GETENTROPY
-    /* nothing to clean */
 #else
     dev_urandom_close();
 #endif
